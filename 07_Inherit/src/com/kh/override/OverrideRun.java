package com.kh.override;

public class OverrideRun {
	
	public static void main(String[] args) {
		
		Book b = new Book("홍길동전", "허균");
		System.out.println(b);
		System.out.println(b.toString());
		
		/*
		 * 참조변수를 호출하면 자동으로 .toString()가 호출된다
		 * 
		 * 오버라이딩 전 : Object 클래스의 toString() 실행
		 * -> 풀클래스명 + @ + 객체의 해쉬코드의 16진수값
		 * 
		 * !!! Object라는 근원 클래스에서 모든 클래스들이 나온다.
		 *	   = Object가 부모, 다른 모든 클래스는 자식
		 * 따라서, Book 클래스에 toString 메서드를 따로 만들지 않은 상태로
		 * 		 System.out.println(b);
		 * 		 System.out.println(b.toString());
		 * 를 출력했을 때 이 두 결과값은 같은 주소값이 나오는데
		 * 그 이유는 object 클래스에서 설정, 계산된 값이 주소값이기 때문
		 * 원하는 값을 표현하기 위해서는
		 * 그 객체(Book)에 toString()을 재정의, 즉 오버라이딩 해야!!
		 * 
		 * 
		 * 
		 * 오버라이딩 후 : Book 클래스의 toString() 실행
		 * -> 해당 객체가 가지고 있는 모든 필드 값을 한 문자열로 반환
		 * 
		 */
		
		
		/*
		 *  * 오버라이딩
		 *  - 자식클래스가 상속받고 있는 부모 클래스의 메소드를 재정의(재작성)하는 것
		 *  - 의미 : 부모가 제공하는 메소드를 자식이 일부 고쳐 사용
		 *    자식객체를 통해 실행 시 자식메소드가 우선권 가짐
		 *    
		 *  * 오버라이딩 성립조건
		 *  - 부모메소드명과 동일
		 *  - 매개변수 갯수, 자료형, 순서 동일(매개변수명은 상관없음)
		 *  - 부모메소드의 반환형도 동일해야
		 *  - 부모메소드의 접근제한자보다 범위가 같거나 커야
		 *	  ex) 부모메서드의 접군제한자가 protected인 경우,
		 *		  자식메서드가 오버라이딩할 때 메서드 접근제한자는 protected 혹은 public 이어야
		 *  -> 규약의 개념이 들어가있음
		 *  
		 *  
		 *  * @Override : 어노테이션(annotation)
		 *  - 생략 가능, 상관없음(명시하지 않아도 됨)
		 *  - 어노테이션을 명시하는 이유
		 *   -> 찾아보기 쉬움: 부모 메서드명이나 매개변수가 수정될 경우
		 *   -> 직관적: 메서드가 오버라이딩한 메서드라는 사실을 직관적으로 알 수 있음
		 */
		
	}

}
