package com.kh.object;
/*
 * * package
 *   - 저장위치 구분: 클래스간의 공간적 충돌이나 접근방법의 충돌을 막기위해
 *     명확하게 접근할 수 있도록 해주는 것
 *   - 보통 네이밍 방법은 회사 도메인을 역으로 입력
 *     예시) www.kh.com  -> com.kh.ooo
 * 
 * 
 * 1. 객체 지향 언어:
 * "객체" 를 지향하는 언어로, "객체중심"으로 돌아간다고 생각하면 된다.
 * 
 * 2. 객체란?
 * 현실세계에 독립적으로 존재(목적, 가치, 의미가 있는)하는 모든 것들을 의미(유형, 무형, 개념,...)
 * 현실세계는 객체간의 상호작용으로 돌아간다.
 * 
 * 3. 객체지향 프로그래밍 :
 * 현실세계 객체간의 상호작용
 * 프로그램밍을 통해 가상세계로 구현하는 과정
 * 
 * 4. 구현하고자 하는 프로그램 상의 필요한 객체를 만들기 위해서는(즉, 생성하기 위해)?
 * : 클래스라는 틀을 먼저 만들어야한다!!
 *   @ 클래스란? 각 객체의 속성(데이터)들을 담아낼 그릇같은 존재
 *   
 * 5. 추상화 과정
 *  1) 내가 구현하고자 하는 프로그램에서 필요한 객체 생각해 볼 것
 *  2) 그 객체들이 가지는 공통적인 속성, 기능들을 추출할 것
 *  3) 추출한 것을 가지고 내가 구현하고자 했던 프로그램의 "실질적 목적"에 맞춰 불필요한 속성, 기능 제거할 것
 *  4) 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 변수명으로 사용할 것인지 정의
 *  
 *  ex) 학생관리 프로그램
 * 		(1) 학생 객체(홍길동 학생, 전우치 학생, 김선달 학생...)
 * 		(2) 공통적인 속성 / 기능(이름, 나이, 주소, 전화번호, 키, 달리기속도... / 먹는다, 잔다, 화장실간다...)
 *   	(3) 학생 "인적사항"을 관리하는 프로그램 : 이름, 나이, 주소, 전화번호, 학년, 반 등
 *   	    힉생 "성적"을 관리하는 프로그램 : 이름, 학년, 반, 국어점수, 영어점수, 수학점수 등
 *   	    힉생 "건강"을 관리하는 프로그램 : 이름, 학년, 반, 키, 몸무게, 달리기속도, 유연성 등
 *   	
 *   	   -> 이름, 나이, 키라는 가정 하에
 *   	(4) 이름 : String name;
 *   	    나이 : int age;
 *   	    키 : double height;
 * 
 * 6. 위의 추상화 과정을 통해 본격적인 프로그램을 만들 것
 *    1) "변수"만으로 프로그램을 한다면?
 *      * 변수 = 하나의 자료형에 하나의 값만을 보관 가능
 *        홍길동이라는 학생 객체를 만들기 위해서 -> String name1 = "홍길동", int age1 = 20; double height1 = 163.2;
 * 		  전우치라는 학생 객체를 만들기 위해서  -> String name2 = "전우치", int age1 = 30; double height1 = 155.5;
 * 		=> 문제점: 수백명에 달하는 학생들을 만들 때 수천개의 변수가 필요
 *    2) "배열"로 프로그래밍을 한다면?
 *      * 배열 = 하나의 자료형에 여러 값을 보관 가능
 *        학생의 이름을 보관하는 배열 String[] name = {"홍길동", "전우치"...}
 *        학생의 나이를 보관하는 배열 int[] age = {20, 30, ...}
 *        ...
 *      => 문제점: 학생 정보를 수정할 때 실수하면 정보가 뒤바뀔 수 있으며,
 *      		 또한 새로운 학생을 추가할 때 새로운 크기의 배열을 만들어 기존 배열로부터 복사 후 추가해줘야함
 *     3) 구조체? ( 1), 2)로 인해 나온 개념, 자바가 아닌 언어에서 사용)
 *       * 여러개의 자료형과 여러개의 값을 보관 가능
 *       String 값, int값, 동시에 double 모두 동시에 저장 가능
 *       -> 나만의 자료형 집합을 만들 수 있음
 *       	자바에서는 구조체 개념 확장, '클래스' 개념 만듬
 *       
 *       //// 캡슐화
 *       	  : 추상화를 통해 속성과 기능을 하나로 묶어 관리하는 기법
 *       		클래스에서 가중 중요한 목적인 "데이터의 접근제한(정보은닉)"을 원칙으로
 *       		외부로부터 "데이터의 접근을 막고"
 *       		대신 "데이터를 간접적으로 처리(값을 대입, 값을 리턴)"할 메소드를 클래스 내부에 작성해서 관리하는 것
 *    
 */

public class Run {
	public static void main(String[] args) {
		// 클래스를 이용해 학생 객체 만들어 보기
		
		// 자바에서 객체로 만들기 위해서는 new 라는 키워드를 통해 메모리 공간을 할당해야
		Student choi = new Student("전우치", 17, 187.2);
		Student kim = new Student("홍길동", 20, 165.5);
		
		choi.print(); //choi라는 객체 메모리 공간에 접근해서 프린트해
		kim.print();
		
//		// . : 해당 객체에 접근할 때 사용
//		choi.name = "최배달"; // choi 객체에 접근해서 바꿔라
//		choi.setAge = 90;
//		choi.print();
//		
//		
//		System.out.println("안녕하세요. " + choi.age + "살 " + choi.name + "입니다.");
//		
//		choi.print();
//		choi.print("남자");
//		
//		
//		System.out.println(choi.count);
//		System.out.println(Student.count);
		
		NumberPrinter.showDouble(0.3);
		
	}

}
